(window.webpackJsonp=window.webpackJsonp||[]).push([[83],{584:function(t,n,e){"use strict";e.r(n);var i=e(62),s=Object(i.a)({},(function(){var t=this.$createElement,n=this._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":this.$parent.slotKey}},[n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[this._v('Page({\n\n  /**\n   * 页面的初始数据\n   */\n  data: {\n    delBtnWidth: 70,\n    list: [],\n    startX: "",\n    scrollY:true\n  },\n  swipeDirection: 0,//是否触发水平滑动 0:未触发 1:触发水平滑动 2:触发垂直滑动\n  onLoad: function(options) {\n   \n  },\n  onShow: function() {\n     \n  },\n  touchS: function(e) {\n    if (e.touches.length == 1) {\n      this.setData({\n        //设置触摸起始点水平方向位置\n        startX: e.touches[0].clientX,\n        startY: e.touches[0].clientY\n      });\n      var list = this.data.list;\n      list.map(function(item, i) {\n        item.txtStyle = "left:0px";\n      })\n      this.setData({\n        list: list\n      })\n    }\n  },\n  touchM: function(e) {\n    if (e.touches.length == 1) {\n      //手指移动时水平方向位置\n      var moveX = e.touches[0].clientX;\n      var moveY = e.touches[0].clientY;\n      //已触发垂直滑动，由scroll-view处理滑动操作\n      \n      //手指起始点位置与移动期间的差值\n      var disX = this.data.startX - moveX;\n      var disY = this.data.startX - moveY;\n      if (this.swipeDirection === 2) {\n        return;\n      }\n      //未触发滑动方向\n      if (this.swipeDirection === 0) {\n        console.log(Math.abs(disY));\n        //触发垂直操作\n        if (Math.abs(disY) > 4) {\n          this.swipeDirection = 2;\n\n          return;\n        }\n        //触发水平操作\n        if (Math.abs(disX) > 4) {\n          this.swipeDirection = 1;\n          this.setData({ scrollY: false });\n        }\n        else {\n          return;\n        }\n\n      }\n      var delBtnWidth = this.data.delBtnWidth;\n      var txtStyle = "";\n      if (disX == 0 || disX < 0) { //如果移动距离小于等于0，说明向右滑动，文本层位置不变\n        txtStyle = "left:0px";\n      } else if (disX > 0) { //移动距离大于0，文本层left值等于手指移动距离\n        txtStyle = "left:-" + disX + "px";\n        if (disX >= delBtnWidth) {\n          //控制手指移动距离最大值为删除按钮的宽度\n          txtStyle = "left:-" + delBtnWidth + "px";\n        }\n      }\n      //获取手指触摸的是哪一项\n      var index = e.currentTarget.dataset.index;\n      var list = this.data.list;\n      list[index].txtStyle = txtStyle;\n      //更新列表的状态\n      this.setData({\n        list: list\n      });\n    }\n  },\n  touchE: function(e) {\n    var swipeDirection = this.swipeDirection;\n    this.swipeDirection = 0;\n    if (e.changedTouches.length == 1) {\n      //手指移动结束后水平位置\n      var endX = e.changedTouches[0].clientX;\n      //触摸开始与结束，手指移动的距离\n      var disX = this.data.startX - endX;\n      var delBtnWidth = this.data.delBtnWidth;\n      //如果距离小于删除按钮的1/2，不显示删除按钮\n      var txtStyle = disX > delBtnWidth / 2 ? "left:-" + delBtnWidth + "px" : "left:0px";\n     \n      //获取手指触摸的是哪一项\n      var index = e.currentTarget.dataset.index;\n      var list = this.data.list;\n      list[index].txtStyle = txtStyle;\n      //更新列表的状态\n      this.setData({\n        list: list\n      });\n      if (disX <= delBtnWidth / 2) {\n        this.setData({ scrollY: true });\n      }\n    }\n  },\n  //获取元素自适应后的实际宽度\n  getEleWidth: function(w) {\n    var real = 0;\n    try {\n      var res = wx.getSystemInfoSync().windowWidth;\n      var scale = (750 / 2) / (w / 2); //以宽度750px设计稿做宽度的自适应\n      real = Math.floor(res / scale);\n      return real;\n    } catch (e) {\n      return false;\n      // Do something when catch error\n    }\n  },\n  initEleWidth: function() {\n    var delBtnWidth = this.getEleWidth(this.data.delBtnWidth);\n    this.setData({\n      delBtnWidth: delBtnWidth\n    });\n  },\n\n})\n')])])])])}),[],!1,null,null,null);n.default=s.exports}}]);