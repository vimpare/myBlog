(window.webpackJsonp=window.webpackJsonp||[]).push([[90],{593:function(t,n,e){"use strict";e.r(n);var s=e(62),a=Object(s.a)({},(function(){var t=this.$createElement,n=this._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":this.$parent.slotKey}},[n("p",[this._v("自定义组件，它们有相互间的关系，相互间的通信往往比较复杂。此时在组件定义时加入 relations 定义段")]),this._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[this._v("<custom-ul>\n  <custom-li>item 1</custom-li>\n  <custom-li>item 2</custom-li>\n</custom-ul>\n")])])]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[this._v("// path/to/custom-ul.js\nComponent({\n  relations: {\n    './custom-li': {\n      type: 'child', // 关联的目标节点应为子节点\n      linked(target) {\n        // 每次有custom-li被插入时执行，target是该节点实例对象，触发在该节点attached生命周期之后\n      },\n      linkChanged(target) {\n        // 每次有custom-li被移动后执行，target是该节点实例对象，触发在该节点moved生命周期之后\n      },\n      unlinked(target) {\n        // 每次有custom-li被移除时执行，target是该节点实例对象，触发在该节点detached生命周期之后\n      }\n    }\n  },\n  methods: {\n    _getAllLi() {\n      // 使用getRelationNodes可以获得nodes数组，包含所有已关联的custom-li，且是有序的\n      const nodes = this.getRelationNodes('path/to/custom-li')\n    }\n  },\n  ready() {\n    this._getAllLi()\n  }\n})\n// path/to/custom-li.js\nComponent({\n  relations: {\n    './custom-ul': {\n      type: 'parent', // 关联的目标节点应为父节点\n      linked(target) {\n        // 每次被插入到custom-ul时执行，target是custom-ul节点实例对象，触发在attached生命周期之后\n      },\n      linkChanged(target) {\n        // 每次被移动后执行，target是custom-ul节点实例对象，触发在moved生命周期之后\n      },\n      unlinked(target) {\n        // 每次被移除时执行，target是custom-ul节点实例对象，触发在detached生命周期之后\n      }\n    }\n  }\n})\n")])])]),n("p",[this._v("必须在两个组件定义中都加入relations定义，否则不会生效。")])])}),[],!1,null,null,null);n.default=a.exports}}]);