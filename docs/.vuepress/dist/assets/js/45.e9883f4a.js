(window.webpackJsonp=window.webpackJsonp||[]).push([[45],{489:function(e,a,t){"use strict";t.r(a);var s=t(62),_=Object(s.a)({},(function(){var e=this,a=e.$createElement,t=e._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("p",[e._v("面向对象编程")]),e._v(" "),t("h4",{attrs:{id:"创建和使用类"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#创建和使用类"}},[e._v("#")]),e._v(" 创建和使用类")]),e._v(" "),t("h5",{attrs:{id:"创建类"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#创建类"}},[e._v("#")]),e._v(" 创建类")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("class Dog():\n    def __init__(self,name,age):\n        self.name=name;\n        self.age=age;\n  \n    def sit(self):\n        print(self.name,'is sitting')\n   \n    def roll_over(self):\n        print(self.name,'is roll_over')\n")])])]),t("ul",[t("li",[t("code",[e._v("__init__()")]),e._v(" 是一个特殊的方法，每当你根据Dog 类创建新实例时，Python都会自动运行它。在这个方法的名称中，开头和末尾各有两个下划线，这是一种约定，旨在避免Python默认方法与普通方法发生名称冲突。")]),e._v(" "),t("li",[e._v("为Python调用这个"),t("code",[e._v("__init__()")]),e._v(" 方法来创建Dog 实例时，将自动传入实参self 。每个与类相关联的方法调用都自动传递实参self ，它是一个指向实例本身 的引用，让实例能够访问类中的属性和方法。")]),e._v(" "),t("li",[e._v("每当我们根据Dog 类创建实例时，都只需给最后两个形参（name 和age ）提供值。")])]),e._v(" "),t("h5",{attrs:{id:"根据类来创建实例"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#根据类来创建实例"}},[e._v("#")]),e._v(" 根据类来创建实例")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('my_dog = Dog(\'willie\', 6)\nprint(my_dog.name.title()) \nprint("My dog is " + str(my_dog.age) + " years old.")\n')])])]),t("ul",[t("li",[t("code",[e._v("my_dog.name.title()")]),e._v(" 将"),t("code",[e._v("my_dog")]),e._v(" 的属性"),t("code",[e._v("name")]),e._v(" 的 值'"),t("code",[e._v("willie")]),e._v("' 改为首字母大写的；")]),e._v(" "),t("li",[e._v("在第2条"),t("code",[e._v("print")]),e._v(" 语句中，"),t("code",[e._v("str(my_dog.age)")]),e._v(" 将"),t("code",[e._v("my_dog")]),e._v(" 的属性"),t("code",[e._v("age")]),e._v(" 的值6 转换为字符串")])]),e._v(" "),t("p",[e._v("可以创建多个实例")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("my_dog = Dog('willie', 6)\nyour_dog = Dog('black',5)\n")])])]),t("h5",{attrs:{id:"使用类和实例"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#使用类和实例"}},[e._v("#")]),e._v(" 使用类和实例")]),e._v(" "),t("p",[e._v("可以以三种不同的方式修改属性的值：\n直接通过实例进行修改；\n通过方法进行设置；\n通过方法进行递增（增加特定的值）")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("class Car(): \n    --snip-- \nmy_new_car = Car('audi', 'a4', 2016) \nprint(my_new_car.get_descriptive_name()) \nmy_new_car.odometer_reading = 23 \nmy_new_car.read_odometer()\n")])])]),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('class Car(): \n    --snip--  \n    def update_odometer(self, mileage): \n        """将里程表读数设置为指定的值""" \n        self.odometer_reading = mileage \nmy_new_car = Car(\'audi\', \'a4\', 2016) \nprint(my_new_car.get_descriptive_name()) \nmy_new_car.update_odometer(23) \nmy_new_car.read_odometer()\n')])])]),t("h5",{attrs:{id:"继承"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#继承"}},[e._v("#")]),e._v(" 继承")])])}),[],!1,null,null,null);a.default=_.exports}}]);