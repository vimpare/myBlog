(window.webpackJsonp=window.webpackJsonp||[]).push([[58],{561:function(n,e,t){"use strict";t.r(e);var a=t(62),o=Object(a.a)({},(function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[t("h3",{attrs:{id:"组件基础"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#组件基础"}},[n._v("#")]),n._v(" 组件基础")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("// 定义一个名为 button-counter 的新组件\nVue.component('button-counter', {\n  data: function () {\n    return {\n      count: 0\n    }\n  },\n  template: '<button v-on:click=\"count++\">You clicked me {{ count }} times.</button>'\n})\n")])])]),t("p",[n._v("组件是可复用的 Vue 实例，且带有一个名字：在这个例子中是 "),t("code",[n._v("<button-counter>")]),n._v("。我们可以在一个通过 new Vue 创建的 Vue 根实例中，把这个组件作为自定义元素来使用：")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('<div id="components-demo">\n  <button-counter></button-counter>\n</div>\n')])])]),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("new Vue({ el: '#components-demo' })\n")])])]),t("p",[n._v("因为组件是可复用的 "),t("code",[n._v("Vue")]),n._v(" 实例，所以它们与 "),t("code",[n._v("new Vue")]),n._v(" 接收相同的选项，例如 "),t("code",[n._v("data、computed、watch、methods")]),n._v(" 以及生命周期钩子等。仅有的例外是像 "),t("code",[n._v("el")]),n._v(" 这样根实例特有的选项。")]),n._v(" "),t("h4",{attrs:{id:"data-必须是一个函数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#data-必须是一个函数"}},[n._v("#")]),n._v(" data 必须是一个函数")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("data: function () {\n  return {\n    count: 0\n  }\n}\n")])])]),t("h3",{attrs:{id:"组件注册"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#组件注册"}},[n._v("#")]),n._v(" 组件注册")]),n._v(" "),t("h4",{attrs:{id:"全局注册"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#全局注册"}},[n._v("#")]),n._v(" 全局注册")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("Vue.component('my-component-name', {\n  // ... 选项 ...\n})\n")])])]),t("ul",[t("li",[n._v("注册之后可以用在任何新创建的 Vue 根实例 (new Vue) 的模板中")]),n._v(" "),t("li",[n._v("组件在各自内部也都可以相互使用")])]),n._v(" "),t("h4",{attrs:{id:"局部注册"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#局部注册"}},[n._v("#")]),n._v(" 局部注册")]),n._v(" "),t("p",[n._v("在这些情况下，你可以通过一个普通的 JavaScript 对象来定义组件：")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("var ComponentA = { /* ... */ }\nvar ComponentB = { /* ... */ }\nvar ComponentC = { /* ... */ }\n")])])]),t("p",[n._v("然后在 components 选项中定义你想要使用的组件：")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("new Vue({\n  el: '#app',\n  components: {\n    'component-a': ComponentA,\n    'component-b': ComponentB\n  }\n})\n")])])]),t("ul",[t("li",[n._v("局部注册的组件在其子组件中不可用")])]),n._v(" "),t("p",[n._v("如果你希望 ComponentA 在 ComponentB 中可用，则你需要这样写：")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("var ComponentA = { /* ... */ }\n\nvar ComponentB = {\n  components: {\n    'component-a': ComponentA\n  },\n  // ...\n}\n")])])]),t("h3",{attrs:{id:"模块系统"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#模块系统"}},[n._v("#")]),n._v(" 模块系统")]),n._v(" "),t("p",[n._v("使用了诸如 Babel 和 webpack 的模块系统;")]),n._v(" "),t("p",[n._v("推荐创建一个 "),t("code",[n._v("components")]),n._v(" 目录，并将每个组件放置在其各自的文件中。")]),n._v(" "),t("h4",{attrs:{id:"在模块系统中局部注册"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#在模块系统中局部注册"}},[n._v("#")]),n._v(" 在模块系统中局部注册")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("import ComponentA from './ComponentA'\nimport ComponentC from './ComponentC'\n\nexport default {\n  components: {\n    ComponentA,\n    ComponentC\n  },\n  // ...\n}\n")])])]),t("h4",{attrs:{id:"基础组件的自动化全局注册"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#基础组件的自动化全局注册"}},[n._v("#")]),n._v(" 基础组件的自动化全局注册")]),n._v(" "),t("p",[n._v("可能你的许多组件只是包裹了一个输入框或按钮之类的元素，是相对通用的。我们有时候会把它们称为基础组件，它们会在各个组件中被频繁的用到")]),n._v(" "),t("p",[n._v("如果你恰好使用了 webpack (或在内部使用了 webpack 的 Vue CLI 3+)，那么就可以使用 "),t("code",[n._v("require.context")]),n._v(" 只全局注册这些非常通用的基础组件。")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("import Vue from 'vue'\nimport upperFirst from 'lodash/upperFirst'\nimport camelCase from 'lodash/camelCase'\n\nconst requireComponent = require.context(\n  // 其组件目录的相对路径\n  './components',\n  // 是否查询其子目录\n  false,\n  // 匹配基础组件文件名的正则表达式\n  /Base[A-Z]\\w+\\.(vue|js)$/\n)\n\nrequireComponent.keys().forEach(fileName => {\n  // 获取组件配置\n  const componentConfig = requireComponent(fileName)\n\n  // 获取组件的 PascalCase 命名\n  const componentName = upperFirst(\n    camelCase(\n      // 获取和目录深度无关的文件名\n      fileName\n        .split('/')\n        .pop()\n        .replace(/\\.\\w+$/, '')\n    )\n  )\n\n  // 全局注册组件\n  Vue.component(\n    componentName,\n    // 如果这个组件选项是通过 `export default` 导出的，\n    // 那么就会优先使用 `.default`，\n    // 否则回退到使用模块的根。\n    componentConfig.default || componentConfig\n  )\n})\n")])])])])}),[],!1,null,null,null);e.default=o.exports}}]);