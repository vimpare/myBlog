(window.webpackJsonp=window.webpackJsonp||[]).push([[72],{574:function(e,t,n){"use strict";n.r(t);var a=n(62),r=Object(a.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h2",{attrs:{id:"entry"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#entry"}},[e._v("#")]),e._v(" Entry")]),e._v(" "),n("p",[e._v("配置模块的入口")]),e._v(" "),n("p",[e._v("必填的")]),e._v(" "),n("h4",{attrs:{id:"context"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#context"}},[e._v("#")]),e._v(" context")]),e._v(" "),n("p",[e._v("Webpack 在寻找相对路径的文件时会以 context 为根目录，context 默认为执行启动 Webpack 时所在的当前工作目录。 如果想改变 context 的默认配置，则可以在配置文件里这样设置它：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("\nmodule.exports = {\n  context: path.resolve(__dirname, 'app')\n}\n")])])]),n("p",[n("code",[e._v("context")]),e._v(" 必须是一个绝对路径的字符串。 除此之外，还可以通过在启动 "),n("code",[e._v("Webpack")]),e._v(" 时带上参数 "),n("code",[e._v("webpack --context")]),e._v(" 来设置 "),n("code",[e._v("context。")])]),e._v(" "),n("p",[n("code",[e._v("Entry")]),e._v(" 的路径和其依赖的模块的路径可能采用相对于 "),n("code",[e._v("context")]),e._v(" "),n("code",[e._v("的路径来描述，context")]),e._v(" 会影响到这些相对路径所指向的真实文件。")]),e._v(" "),n("h4",{attrs:{id:"entry-类型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#entry-类型"}},[e._v("#")]),e._v(" Entry 类型")]),e._v(" "),n("table",[n("thead",[n("tr",[n("th",[e._v("类型")]),e._v(" "),n("th",[e._v("例子")]),e._v(" "),n("th",[e._v("含义")])])]),e._v(" "),n("tbody",[n("tr",[n("td",[e._v("string")]),e._v(" "),n("td",[e._v("'./app/entry'")]),e._v(" "),n("td",[e._v("入口模块的文件路径，可以是相对路径。")])]),e._v(" "),n("tr",[n("td",[e._v("array")]),e._v(" "),n("td",[e._v("['./app/entry1', './app/entry2']")]),e._v(" "),n("td",[e._v("入口模块的文件路径，可以是相对路径。")])]),e._v(" "),n("tr",[n("td",[e._v("object")]),e._v(" "),n("td",[e._v("{ a: './app/entry-a', b: ['./app/entry-b1', './app/entry-b2']}")]),e._v(" "),n("td",[e._v("配置多个入口，每个入口生成一个 Chunk")])])])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('// 多页面入口\n    var getEntries = function() {\n        let entryOFiles = getFiles(resolve("src/js/page/**/*.js"));\n        let entryFiles = Object.keys(entryOFiles);\n        let entries = {};\n        entryFiles.forEach(function(entry) {\n            let pathname = entryOFiles[entry].pathname;\n            if (!/^(common)/.test(pathname)) {\n                entries[pathname] = entry;\n            }\n        });\n        return entries;\n    };\n    let entries = getEntries();\n')])])]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("function resolve() {\n    var args = [].filter.call(arguments, item => typeof item === 'string');\n    return path.resolve(__dirname, '../', ...args);\n}\n")])])]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// 根据glob模型获取files (传入的path需使用*)\nfunction getFiles(globModel) {\n    var files = glob.sync(globModel);\n    var rootDir = glob.sync(globModel.replace(/(\\*.*)$/,''))[0];\n\n    var entries = {};\n    files.forEach(function(file,index){\n        let dirname = path.dirname(file);\n        let extname = path.extname(file);\n        let basename = path.basename(file, extname);\n        let pathname = (dirname+'/').replace(rootDir,'')+basename;\n        entries[file] = { dirname, extname, basename, pathname };\n    });\n\n    return entries;\n}\n")])])]),n("h2",{attrs:{id:"output"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#output"}},[e._v("#")]),e._v(" Output")]),e._v(" "),n("p",[e._v("如何输出最终想要的代码。\n"),n("code",[e._v("output")]),e._v(" 是一个 "),n("code",[e._v("object")]),e._v("，里面包含一系列配置项。")]),e._v(" "),n("ul",[n("li",[n("code",[e._v("filename")]),e._v(" 用于输出文件的文件名。")]),e._v(" "),n("li",[e._v("目标输出目录 "),n("code",[e._v("path")]),e._v(" 的绝对路径。")]),e._v(" "),n("li",[e._v("webpack.config.js"),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("const config = {\noutput: {\n    filename: 'bundle.js',\n    path: '/home/proj/public/assets'\n}\n};\n\nmodule.exports = config;\n")])])])]),e._v(" "),n("li",[e._v("output.filename 配置输出文件的名称，为string 类型。 如果只有一个输出文件，则可以把它写成静态不变的："),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("filename: 'bundle.js'\n")])])])]),e._v(" "),n("li",[e._v("多个入口起点")])])])}),[],!1,null,null,null);t.default=r.exports}}]);