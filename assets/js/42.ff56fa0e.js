(window.webpackJsonp=window.webpackJsonp||[]).push([[42],{545:function(a,s,e){"use strict";e.r(s);var t=e(62),l=Object(t.a)({},(function(){var a=this,s=a.$createElement,e=a._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[e("ul",[e("li",[a._v("Python的语法比较简单，采用缩进方式"),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("# print absolute value of an integer:\na = 100\nif a >= 0:\n    print(a)\nelse:\n    print(-a)\n")])])])]),a._v(" "),e("li",[a._v("以"),e("code",[a._v("#")]),a._v("开头的语句是注释")]),a._v(" "),e("li",[a._v("按照约定俗成的惯例，应该始终坚持使用4个空格的缩进")])]),a._v(" "),e("h4",{attrs:{id:"数据类型和变量"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#数据类型和变量"}},[a._v("#")]),a._v(" 数据类型和变量")]),a._v(" "),e("p",[e("strong",[a._v("数据类型")])]),a._v(" "),e("p",[a._v("在Python中，能够直接处理的数据类型有以下几种：\n"),e("strong",[a._v("整数、浮点数、字符串、布尔值、空值、变量、常量")])]),a._v(" "),e("ul",[e("li",[e("strong",[a._v("整数")]),a._v("\nPython可以处理任意大小的整数，当然包括负整数，在程序中的表示方法和数学上的写法一模一样，例如：1，100，-8080，0，等等。")]),a._v(" "),e("li",[e("strong",[a._v("布尔值")])])]),a._v(" "),e("p",[a._v("布尔值和布尔代数的表示完全一致，一个布尔值只有"),e("code",[a._v("True、False")]),a._v("两种值，要么是True，要么是False，在Python中，可以直接用True、False表示布尔值（请注意大小写），也可以通过布尔运算计算出来：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v(">>> True\nTrue\n>>> False\nFalse\n>>> 3 > 2\nTrue\n>>> 3 > 5\nFalse\n")])])]),e("p",[a._v("布尔值可以用"),e("code",[a._v("and、or和not")]),a._v("运算。\nand运算是与运算，只有所有都为True，and运算结果才是True;\nor运算是或运算，只要其中有一个为True，or运算结果就是True\nnot运算是非运算，它是一个单目运算符，把True变成False，False变成True")]),a._v(" "),e("ul",[e("li",[e("strong",[a._v("空值")])])]),a._v(" "),e("p",[a._v("空值是Python里一个特殊的值，用None表示。None不能理解为0，因为0是有意义的，而None是一个特殊的空值。")]),a._v(" "),e("h4",{attrs:{id:"使用list和tuple"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#使用list和tuple"}},[a._v("#")]),a._v(" 使用list和tuple")]),a._v(" "),e("p",[e("strong",[a._v("list")])]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v(">>> classmates = ['Michael', 'Bob', 'Tracy']\n>>> classmates\n['Michael', 'Bob', 'Tracy']\n")])])]),e("ul",[e("li",[e("p",[a._v("变量classmates就是一个list。用"),e("code",[a._v("len()")]),a._v("函数可以获得list元素的个数：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v(">>> len(classmates)\n3\n")])])])]),a._v(" "),e("li",[e("p",[a._v("用索引来访问list中每一个位置的元素，记得索引是从0开始的")])]),a._v(" "),e("li",[e("p",[a._v("当索引超出了范围时，Python会报一个IndexError错误,最后一个元素的索引是"),e("code",[a._v("len(classmates) - 1")])])]),a._v(" "),e("li",[e("p",[a._v("-1做索引，直接获取最后一个元素")])]),a._v(" "),e("li",[e("p",[a._v("list中追加元素到末尾：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v(">>> classmates.append('Adam')\n>>> classmates\n['Michael', 'Bob', 'Tracy', 'Adam']\n")])])])]),a._v(" "),e("li",[e("p",[a._v("把元素插入到指定的位置，比如索引号为1的位置：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v(">>> classmates.insert(1, 'Jack')\n>>> classmates\n['Michael', 'Jack', 'Bob', 'Tracy', 'Adam']\n")])])])]),a._v(" "),e("li",[e("p",[a._v("删除list末尾的元素，用pop()方法：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v(">>> classmates.pop()\n'Adam'\n>>> classmates\n['Michael', 'Jack', 'Bob', 'Tracy']\n")])])])]),a._v(" "),e("li",[e("p",[a._v("要删除指定位置的元素，用pop(i)方法，其中i是索引位置：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v(">>> classmates.pop(1)\n'Jack'\n>>> classmates\n['Michael', 'Bob', 'Tracy']\n\n")])])])])]),a._v(" "),e("p",[e("strong",[a._v("tuple")]),a._v("\n元组：tuple")]),a._v(" "),e("ul",[e("li",[a._v("tuple一旦初始化就不能修改")])]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v(">>> classmates = ('Michael', 'Bob', 'Tracy')\n")])])]),e("p",[a._v("它也没有append()，insert()这样的方法。其他获取元素的方法和list是一样的，你可以正常地使用classmates[0]，classmates[-1]，但不能赋值成另外的元素。")]),a._v(" "),e("ul",[e("li",[a._v("只有1个元素的tuple定义时必须加一个逗号")])]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v(">>> t = (1,)\n>>> t\n(1,)\n")])])]),e("ul",[e("li",[a._v("tuple所谓的“不变”是说，tuple的每个元素，指向永远不变")])]),a._v(" "),e("h4",{attrs:{id:"条件判断"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#条件判断"}},[a._v("#")]),a._v(" 条件判断")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("age = 3\nif age >= 18:\n    print('adult')\nelif age >= 6:\n    print('teenager')\nelse:\n    print('kid')\n")])])]),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("s = input('birth: ')\nbirth = int(s)\nif birth < 2000:\n    print('00前')\nelse:\n    print('00后')\n")])])]),e("h4",{attrs:{id:"循环"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#循环"}},[a._v("#")]),a._v(" 循环")]),a._v(" "),e("p",[a._v("Python的循环有两种，")]),a._v(" "),e("ul",[e("li",[e("p",[a._v("一种是for...in循环，依次把list或tuple中的每个元素迭代出来")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("names = ['Michael', 'Bob', 'Tracy']\nfor name in names:\n    print(name)\n")])])]),e("ul",[e("li",[a._v("range()函数，可以生成一个整数序列"),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v(">>> list(range(5))\n[0, 1, 2, 3, 4]\n")])])])])])]),a._v(" "),e("li",[e("p",[a._v("第二种循环是while循环，只要条件满足，就不断循环，条件不满足时退出循环。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("sum = 0\nn = 99\nwhile n > 0:\n    sum = sum + n\n    n = n - 2\nprint(sum)\n")])])])])]),a._v(" "),e("p",[e("strong",[a._v("break")])]),a._v(" "),e("p",[a._v("在循环中，break语句可以提前退出循环。")]),a._v(" "),e("p",[e("strong",[a._v("continue")])]),a._v(" "),e("p",[a._v("在循环过程中，也可以通过continue语句，跳过当前的这次循环，直接开始下一次循环。")]),a._v(" "),e("h4",{attrs:{id:"使用dict和set"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#使用dict和set"}},[a._v("#")]),a._v(" 使用dict和set")]),a._v(" "),e("p",[e("strong",[a._v("dict")])]),a._v(" "),e("p",[a._v("dict全称dictionary，在其他语言中也称为map，使用键-值（key-value）存储，具有极快的查找速度。\n用Python写一个dict如下：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v(">>> d = {'Michael': 95, 'Bob': 75, 'Tracy': 85}\n>>> d['Michael']\n95\n")])])]),e("ul",[e("li",[a._v("多次对一个key放入value，后面的值会把前面的值冲掉;")]),a._v(" "),e("li",[a._v("如果key不存在，dict就会报错;\n要避免key不存在的错误，有两种办法:\n"),e("ul",[e("li",[a._v("通过"),e("code",[a._v("in")]),a._v("判断key是否存在"),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v(">>> 'Thomas' in d\nFalse\n")])])])]),a._v(" "),e("li",[a._v("是通过dict提供的"),e("code",[a._v("get()")]),a._v("方法，如果key不存在，可以返回"),e("code",[a._v("None")]),a._v("，或者自己指定的value："),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v(">>> d.get('Thomas')\n>>> d.get('Thomas', -1)\n-1\n")])])])])])]),a._v(" "),e("li",[a._v("要删除一个key，用"),e("code",[a._v("pop(key)")]),a._v("方法，对应的value也会从dict中删除")])]),a._v(" "),e("p",[e("strong",[a._v("set")])]),a._v(" "),e("p",[a._v("set和dict类似，也是一组key的集合，但不存储value。由于key不能重复，所以，在set中，没有重复的key。\n要创建一个set，需要提供一个list作为输入集合：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v(">>> s = set([1, 2, 3])\n>>> s\n{1, 2, 3}\n")])])]),e("ul",[e("li",[a._v("重复元素在set中自动被过滤")]),a._v(" "),e("li",[a._v("通过add(key)方法可以添加元素到set中，可以重复添加，但不会有效果")]),a._v(" "),e("li",[a._v("通过remove(key)方法可以删除元素")]),a._v(" "),e("li",[a._v("set可以看成数学意义上的无序和无重复元素的集合，因此，两个set可以做数学意义上的交集、并集等操作："),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v(">>> s1 = set([1, 2, 3])\n>>> s2 = set([2, 3, 4])\n>>> s1 & s2\n{2, 3}\n>>> s1 | s2\n{1, 2, 3, 4}\n")])])])])])])}),[],!1,null,null,null);s.default=l.exports}}]);