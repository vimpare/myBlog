(window.webpackJsonp=window.webpackJsonp||[]).push([[99],{542:function(n,t,a){"use strict";a.r(t);var e=a(62),r=Object(e.a)({},(function(){var n=this.$createElement,t=this._self._c||n;return t("ContentSlotsDistributor",{attrs:{"slot-key":this.$parent.slotKey}},[t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("第一部分　基础知识17\n第1章19\n1.1 动态类型语言和鸭子类型20\n1.2 多态25\n1.3 封装39\n1.4 原型模式和基于原型继承的JavaScript对象系统44\n第2章62\n2.1 this63\n2.2 call和apply71\n第3章82\n3.1 闭包83\n3.2 高阶函数99\n3.3 小结125\n第二部分　设计模式126\n第4章128\n4.1 实现单例模式129\n4.2 透明的单例模式132\n4.3 用代理实现单例模式135\n4.4 JavaScript中的单例模式137\n4.5 惰性单例141\n4.6 通用的惰性单例146\n4.7 小结151\n第5章152\n5.1 使用策略模式计算奖金154\n5.2 JavaScript版本的策略模式161\n5.3 多态在策略模式中的体现163\n5.4 使用策略模式实现缓动动画164\n5.5 更广义的“算法”171\n5.6 表单校验172\n5.7 策略模式的优缺点184\n5.8 一等函数对象与策略模式186\n5.9 小结188\n第6章189\n6.1 第一个例子——小明追MM的故事191\n6.2 保护代理和虚拟代理196\n6.3 虚拟代理实现图片预加载198\n6.4 代理的意义201\n6.5 代理和本体接口的一致性204\n6.6 虚拟代理合并HTTP请求206\n6.7 虚拟代理在惰性加载中的应用210\n6.8 缓存代理216\n6.9 用高阶函数动态创建代理219\n6.10 其他代理模式221\n6.11 小结222\n第7章223\n7.1 jQuery中的迭代器224\n7.2 实现自己的迭代器225\n7.3 内部迭代器和外部迭代器226\n7.4 迭代类数组对象和字面量对象230\n7.5 倒序迭代器232\n7.6 中止迭代器233\n7.7 迭代器模式的应用举例234\n7.8 小结239\n第8章240\n8.1 现实中的发布－订阅模式241\n8.2 发布－订阅模式的作用242\n8.3 DOM事件244\n8.4 自定义事件246\n8.5 发布－订阅模式的通用实现250\n8.6 取消订阅的事件253\n8.7 真实的例子——网站登录255\n8.8 全局的发布－订阅对象259\n8.9 模块间通信263\n8.10 必须先订阅再发布吗265\n8.11 全局事件的命名冲突267\n8.12 JavaScript实现发布－订阅模式的便利性274\n8.13 小结275\n第9章276\n9.1 命令模式的用途278\n9.2 命令模式的例子——菜单程序279\n9.3 JavaScript中的命令模式283\n9.4 撤销命令287\n9.5 撤消和重做292\n9.6 命令队列296\n9.7 宏命令298\n9.8 智能命令与傻瓜命令301\n9.9 小结303\n第10章304\n10.1 回顾宏命令306\n10.2 组合模式的用途309\n10.3 请求在树中传递的过程311\n10.4 更强大的宏命令313\n10.5 抽象类在组合模式中的作用318\n10.6 透明性带来的安全问题321\n10.7 组合模式的例子——扫描文件夹323\n10.8 一些值得注意的地方327\n10.9 引用父对象329\n10.10 何时使用组合模式333\n10.11 小结334\n第11章335\n11.1 模板方法模式的定义和组成336\n11.2 第一个例子——Coffee or Tea337\n11.3 抽象类345\n11.4 模板方法模式的使用场景353\n11.5 钩子方法355\n11.6 好莱坞原则359\n11.7 真的需要“继承”吗361\n11.8 小结364\n第12章365\n12.1 初识享元模式366\n12.2 内部状态与外部状态369\n12.3 享元模式的通用结构371\n12.4 文件上传的例子372\n12.5 享元模式的适用性383\n12.6 再谈内部状态和外部状态384\n12.7 对象池388\n12.8 小结395\n第13章396\n13.1 现实中的职责链模式397\n13.2 实际开发中的职责链模式399\n13.3 用职责链模式重构代码402\n13.4 灵活可拆分的职责链节点405\n13.5 异步的职责链409\n13.6 职责链模式的优缺点411\n13.7 用AOP实现职责链414\n13.8 用职责链模式获取文件上传对象416\n13.9 小结418\n第14章419\n14.1 现实中的中介者422\n14.2 中介者模式的例子——泡泡堂游戏424\n14.3 中介者模式的例子——购买商品439\n14.4 小结455\n第15章457\n15.1 模拟传统面向对象语言的装饰者模式459\n15.2 装饰者也是包装器462\n15.3 回到JavaScript的装饰者463\n15.4 装饰函数465\n15.5 用AOP装饰函数469\n15.6 AOP的应用实例473\n15.7 装饰者模式和代理模式484\n15.8 小结486\n第16章487\n16.1 初识状态模式488\n16.2 状态模式的定义498\n16.3 状态模式的通用结构499\n16.4 缺少抽象类的变通方式501\n16.5 另一个状态模式示例——文件上传503\n16.6 状态模式的优缺点520\n16.7 状态模式中的性能优化点521\n16.8 状态模式和策略模式的关系522\n16.9 JavaScript版本的状态机523\n16.10 表驱动的有限状态机527\n16.11 实际项目中的其他状态机529\n16.12 小结531\n第17章532\n17.1 现实中的适配器533\n17.2 适配器模式的应用536\n17.3 小结541\n第三部分　设计原则和编程技巧542\n第18章544\n18.1 设计模式中的SRP原则545\n18.2 何时应该分离职责552\n18.3 违反SRP原则553\n18.4 SRP原则的优缺点554\n第19章555\n19.1 减少对象之间的联系557\n19.2 设计模式中的最少知识原则558\n19.3 封装在最少知识原则中的体现563\n第20章565\n20.1 扩展window.onload函数566\n20.2 开放和封闭568\n20.3 用对象的多态性消除条件分支570\n20.4 找出变化的地方573\n20.5 设计模式中的开放－封闭原则577\n20.6 开放－封闭原则的相对性580\n20.7 接受第一次愚弄582\n第21章583\n21.1 回到Java的抽象类584\n21.2 interface590\n21.3 JavaScript语言是否需要抽象类和interface593\n21.4 用鸭子类型进行接口检查596\n21.5 用TypeScript编写基于interface的命令模式598\n第22章605\n22.1 提炼函数606\n22.2 合并重复的条件片段608\n22.3 把条件分支语句提炼成函数610\n22.4 合理使用循环612\n22.5 提前让函数退出代替嵌套条件分支614\n22.6 传递对象参数代替过长的参数列表616\n22.7 尽量减少参数数量618\n22.8 少用三目运算符619\n22.9 合理使用链式调用621\n22.10 分解大型类623\n22.11 用return退出多重循环626\n")])])])])}),[],!1,null,null,null);t.default=r.exports}}]);